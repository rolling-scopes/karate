service:
  name: karate-sensei

plugins:
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-webpack

custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:service}-${self:custom.stage}
  isVersionFunctions-prod: true
  isVersionFunctions-default: false
  waitTimeout: 90
  topicResults: ${file(./config.env.local.yml):TOPIC_RESULTS}
  topicErrors: ${file(./config.env.local.yml):TOPIC_ERRORS}

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1
  stage: test
  timeout: 120
  memorySize: 256
  deploymentBucket: karate-sls-deploys
  environment:
    CODEWARS_ENDPOINT: ${file(./config.env.local.yml):CODEWARS_ENDPOINT}
    CODEWARS_API_KEY: ${file(./config.env.local.yml):CODEWARS_API_KEY}
    SCRAPER_ENDPOINT: ${file(./config.env.local.yml):SCRAPER_ENDPOINT}
    TOPIC_RESULTS: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topicResults}
    TOPIC_ERRORS: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topicErrors}
  versionFunctions: ${self:custom.isVersionFunctions-${self:custom.stage}, self:custom.isVersionFunctions-default}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
        - "sns:Publish"
      Resource:
        - "*"

functions:
  startGather:
    handler: handler.startGather
    timeout: 120
    memorySize: 256
    events:
      - http:
          method: post
          path: gather/{pageName}

    environment:
      statemachine_arn: ${self:resources.Outputs.Gather.Value}

  findExpression:
    handler: handler.findExpression

  checkAddress:
    handler: handler.checkAddress

  addScrapeTask:
    handler: handler.addScrapeTask

  getResults:
    handler: handler.getResults

  getResolvedKatas:
    timeout: 180
    memorySize: 512
    handler: handler.getResolvedKatas

  getKatasInfo:
    handler: handler.getKatasInfo

  sentResults:
    handler: handler.sentResults

  sentErrors:
    handler: handler.sentErrors


stepFunctions:
  stateMachines:
    gather:
      name: gather
      definition:
        Comment: GatherData
        StartAt: ChooseService
        States:
          ChooseService:
            Type: Choice
            Choices:
              -
                Variable: $.pageName
                StringEquals: katas
                Next: GetResolvedKatas
              -
                Variable: $.pageName
                StringEquals: duolingo
                Next: FindExpression
            Default: GatherFailed
          GetResolvedKatas:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-getResolvedKatas
            ResultPath: $.data
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: WaitBeforeGetKatasInfo
          WaitBeforeGetKatasInfo:
            Type: Wait
            Seconds: ${self:custom.waitTimeout}
            Next: GetKatasInfo
          GetKatasInfo:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-getKatasInfo
            InputPath: $.data
            ResultPath: $.data
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: SentResults
          FindExpression:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-findExpression
            ResultPath: $.data
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: CheckAddress
          CheckAddress:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-checkAddress
            InputPath: $.data
            ResultPath: $.data
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: AddScrapeTask
          AddScrapeTask:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-addScrapeTask
            InputPath: $.data
            ResultPath: $.data
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: WaitScrapeResults
          WaitScrapeResults:
            Type: Wait
            Seconds: ${self:custom.waitTimeout}
            Next: GetStatus
          GetStatus:
            Type: Task
            InputPath: $.data
            ResultPath: $.data
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-getResults
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: CheckStatus
          CheckStatus:
            Type: Choice
            Choices:
              -
                Variable: $.data.statusCode
                NumericEquals: 400
                Next: GatherFailed
              -
                Variable: $.data.statusCode
                NumericEquals: 403
                Next: GatherFailed
              -
                Variable: $.data.statusCode
                NumericEquals: 202
                Next: WaitScrapeResults
            Default: GetResults
          GetResults:
            Type: Task
            InputPath: $.data
            ResultPath: $.data
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-getResults
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            Next: SentResults
          SentResults:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-sentResults
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: GatherFailed
            End: true
          GatherFailed:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.prefix}-sentErrors
            End: true

resources:
  Outputs:
    Gather:
      Description: The ARN of the state machine
      Value:
        Ref: Gather
